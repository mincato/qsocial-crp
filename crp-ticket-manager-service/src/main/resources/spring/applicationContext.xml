<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd        
        http://cxf.apache.org/jaxrs
        http://cxf.apache.org/schemas/jaxrs.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd">

	<import resource="profiles.xml" />

	<context:property-placeholder location="${extPropDir:classpath:}application.properties, classpath:config.properties" ignore-unresolvable="true"/>
	
	<bean id="zookeeperCentralClient" init-method="start" destroy-method="close" class="org.apache.curator.framework.CuratorFrameworkFactory" factory-method="newClient">
 		<constructor-arg value="${app.zookeeper.host}"></constructor-arg>
 		<constructor-arg>
 			<bean class="org.apache.curator.retry.ExponentialBackoffRetry">
				<constructor-arg  value="1000"></constructor-arg>
				<constructor-arg  value="3"></constructor-arg>
			</bean>
 		</constructor-arg>
	</bean>
	
	<bean id="zookeeperConnectionString" class="com.qsocialnow.factories.ZookeeperConnectionStringFactory" factory-method="create">
 		<constructor-arg ref="zookeeperCentralClient"></constructor-arg>
 		<constructor-arg value="${app.zookeeper.configurator.path}"></constructor-arg>
	</bean>
	
	<bean id="zookeeperClient" init-method="start" destroy-method="close" class="org.apache.curator.framework.CuratorFrameworkFactory" factory-method="newClient">
 		<constructor-arg ref="zookeeperConnectionString"></constructor-arg>
 		<constructor-arg>
 			<bean class="org.apache.curator.retry.ExponentialBackoffRetry">
				<constructor-arg  value="1000"></constructor-arg>
				<constructor-arg  value="3"></constructor-arg>
			</bean>
 		</constructor-arg>
	</bean>
	
	<bean id="elasticDomainConfig" class="com.qsocialnow.config.ElasticConfigFactory" factory-method="findConfig">
 		<constructor-arg ref="zookeeperCentralClient"></constructor-arg>
 		<constructor-arg value="${app.elastic.config.configurator.path}"></constructor-arg>
	</bean>
	
	<bean id="configurationIndexService" class="com.qsocialnow.elasticsearch.services.config.ConfigurationIndexService" init-method="initIndex">
		<property name="configurator" ref="elasticDomainConfig"></property>
		<property name="indexName" value="${elastic.configuration.index.name}"></property>
	</bean>
	
	<bean id="twitterConfig" class="com.qsocialnow.config.TwitterConfigFactory" factory-method="findConfig">
 		<constructor-arg ref="zookeeperCentralClient"></constructor-arg>
 		<constructor-arg value="${app.twitter.app.configurator.path}"></constructor-arg>
	</bean>
	
	<bean id="facebookConfig" class="com.qsocialnow.config.FacebookConfigFactory" factory-method="findConfig">
 		<constructor-arg ref="zookeeperCentralClient"></constructor-arg>
 		<constructor-arg value="${app.facebook.app.configurator.path}"></constructor-arg>
	</bean>
	
	<bean id="domainElasticService" class="com.qsocialnow.elasticsearch.services.config.DomainService">
		<property name="indexConfiguration" ref="configurationIndexService"></property>
		<property name="configurator" ref="elasticDomainConfig"></property>
		<property name="triggerService" ref="triggerElasticService"></property>
		<property name="resolutionService" ref="resolutionElasticService"></property>
	</bean>

	<bean id="caseElasticService" class="com.qsocialnow.elasticsearch.services.cases.CaseTicketService">
         <constructor-arg ref="configurationProvider" />
    </bean>
    
    <bean id="registryService" class="com.qsocialnow.elasticsearch.services.cases.ActionRegistryService">
         <constructor-arg ref="configurationProvider" />
    </bean>
    
    <bean id="configurationProvider" class="com.qsocialnow.config.ElasticConfigFactory" factory-method="findConfig">
         <constructor-arg ref="zookeeperCentralClient"></constructor-arg>
         <constructor-arg value="${app.elastic.cases.configurator.path}" />
    </bean>
	
	<bean id="resolutionElasticService" class="com.qsocialnow.elasticsearch.services.config.ResolutionService">
		<property name="indexConfiguration" ref="configurationIndexService"></property>
		<property name="configurator" ref="elasticDomainConfig"></property>
	</bean>
	
	<bean id="triggerElasticService" class="com.qsocialnow.elasticsearch.services.config.TriggerService">
		<property name="indexConfiguration" ref="configurationIndexService"></property>
		<property name="configurator" ref="elasticDomainConfig"></property>
		<property name="segmentService" ref="segmentElasticService"></property>
	</bean>
	
	<bean id="segmentElasticService" class="com.qsocialnow.elasticsearch.services.config.SegmentService">
		<property name="indexConfiguration" ref="configurationIndexService"></property>
		<property name="configurator" ref="elasticDomainConfig"></property>
	</bean>
	
	<bean id="userResolverElasticService" class="com.qsocialnow.elasticsearch.services.config.UserResolverService">
		<property name="indexConfiguration" ref="configurationIndexService"></property>
		<property name="configurator" ref="elasticDomainConfig"></property>
	</bean>

	<bean id="teamElasticService" class="com.qsocialnow.elasticsearch.services.config.TeamService">
		<property name="indexConfiguration" ref="configurationIndexService"></property>
		<property name="configurator" ref="elasticDomainConfig"></property>
		<property name="userResolverService" ref="userResolverElasticService"></property>
	</bean>
    
    <bean id="caseCategorySetElasticService" class="com.qsocialnow.elasticsearch.services.config.CaseCategorySetService">
    	<property name="indexConfiguration" ref="configurationIndexService"></property>
        <property name="configurator" ref="elasticDomainConfig"></property>
    </bean>
    
     <bean id="caseCategoryElasticService" class="com.qsocialnow.elasticsearch.services.config.CaseCategoryService">
    	<property name="indexConfiguration" ref="configurationIndexService"></property>
        <property name="configurator" ref="elasticDomainConfig"></property>
    </bean>
    
    <bean id="subjectCategorySetElasticService" class="com.qsocialnow.elasticsearch.services.config.SubjectCategorySetService">
    	<property name="indexConfiguration" ref="configurationIndexService"></property>
        <property name="configurator" ref="elasticDomainConfig"></property>
    </bean>
    
	<bean id="subjectCategoryElasticService" class="com.qsocialnow.elasticsearch.services.config.SubjectCategoryService">
    	<property name="indexConfiguration" ref="configurationIndexService"></property>
        <property name="configurator" ref="elasticDomainConfig"></property>
    </bean>
    
    <bean id="subjectElasticService" class="com.qsocialnow.elasticsearch.services.cases.SubjectService">
         <constructor-arg ref="configurationProvider" />
    </bean>

	<bean id="serviceDiscoveryRegister" class="com.qsocialnow.ServiceDiscoveryRegister" destroy-method="close">
	</bean>
	
	<bean id="filterNormalizer" class="com.qsocialnow.common.model.filter.FilterNormalizer">
	</bean>

	<aop:aspectj-autoproxy />

	<context:component-scan base-package="com.qsocialnow.service, com.qsocialnow.persistence"
		annotation-config="true" />
	<context:annotation-config />
	
	<util:map id="actions">
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).CLOSE}" value-ref="closeCaseAction"/>
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).REOPEN}" value-ref="reopenCaseAction"/>
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).PENDING_RESPONSE}" value-ref="pendingResponseCaseAction"/>
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).REGISTER_COMMENT}" value-ref="registerCommentCaseAction"/>
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).RESOLVE}" value-ref="resolveCaseAction"/>
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).REPLY}" value-ref="sendResponseCaseAction"/>
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).TAG_CASE}" value-ref="tagCaseAction"/>
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).ASSIGN}" value-ref="assignCaseAction"/>
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).SEND_MESSAGE}" value-ref="sendMessageCaseAction"/>
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).ATTACH_FILE}" value-ref="attachFileCaseAction"/>
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).CHANGE_SUBJECT}" value-ref="changeSubjectCaseAction"/>
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).TAG_SUBJECT}" value-ref="tagSubjectCaseAction"/>
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).CHANGE_PRIORITY}" value-ref="changePriorityCaseAction"/>
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).MODIFY_SUBJECT}" value-ref="modifySubjectCaseAction"/>
	</util:map>
	
	<util:map id="sources">
    	<entry key="#{T(com.qsocialnow.common.util.FilterConstants).MEDIA_TWITTER}" value-ref="twitterSourceStrategy"/>
    	<entry key="#{T(com.qsocialnow.common.util.FilterConstants).MEDIA_FACEBOOK}" value-ref="facebookSourceStrategy"/>
	</util:map>
	
	<bean id="twitterSourceStrategy" init-method="start" destroy-method="stop" class="com.qsocialnow.common.services.strategies.TwitterSourceStrategy">
        <property name="twitterConfig" ref="twitterConfig"></property>
        <property name="queueConfig" ref="twitterQueueConfig"></property>
        <property name="zookeeperClient" ref="zookeeperClient"></property>
        <property name="twitterUsersZnodePath" value="${app.twitter.users.path}"></property>
        <property name="postProcess" ref="sourceMessagePostProcessImpl"></property>
        <property name="sourceService" ref="sourceCommonService"></property>
    </bean>
    
    <bean id="sourceCommonService" init-method="start" destroy-method="stop" class="com.qsocialnow.common.services.SourceService">
        <property name="zookeeperClient" ref="zookeeperClient"></property>
        <property name="blockedSourcesZnodePath" value="${app.blocked.sources.path}"></property>
    </bean>
    
    <util:map id="postProcessActions">
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).REPLY}" value-ref="sendResponseCaseAction"/>
    	<entry key="#{T(com.qsocialnow.common.model.config.ActionType).SEND_MESSAGE}" value-ref="sendMessageCaseAction"/>
	</util:map>
    
    <bean id="facebookSourceStrategy" init-method="start" destroy-method="stop" class="com.qsocialnow.common.services.strategies.FacebookSourceStrategy">
        <property name="facebookConfig" ref="facebookConfig"></property>
        <property name="queueConfig" ref="facebookQueueConfig"></property>
        <property name="zookeeperClient" ref="zookeeperClient"></property>
        <property name="facebookUsersZnodePath" value="${app.facebook.users.path}"></property>
        <property name="postProcess" ref="sourceMessagePostProcessImpl"></property>
    </bean>
    
	<bean id="twitterQueueConfig" class="com.qsocialnow.factories.BigQueueConfiguratorFactory" factory-method="getConfigurator">
		<constructor-arg ref="zookeeperCentralClient" />
		<constructor-arg value="${app.twitter.queue.configurator.path}" />
	</bean>
	
	<bean id="facebookQueueConfig" class="com.qsocialnow.factories.BigQueueConfiguratorFactory" factory-method="getConfigurator">
		<constructor-arg ref="zookeeperCentralClient" />
		<constructor-arg value="${app.facebook.queue.configurator.path}" />
	</bean>
</beans>